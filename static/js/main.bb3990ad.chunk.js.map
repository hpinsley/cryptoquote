{"version":3,"sources":["images/reward-01.jpg","models/gameModels.ts","components/NoPuzzle.tsx","components/SingleKeyMapping.tsx","components/KeyMap.tsx","components/LetterEntry.tsx","components/LetterBoard.tsx","components/KeyboardHelp.tsx","components/Progress.tsx","components/Playing.tsx","components/Game.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","GameStates","NoPuzzle","props","useState","text","setText","className","rows","cols","value","onChange","ev","target","style","fontSize","onClick","setCypher","setPlainText","SingleKeyMapping","keyClass","isSelectedKey","width","height","border","borderRadius","fromKey","marginTop","toKey","KeyMap","keymap","selectedKey","keys","Array","from","map","k","key","get","id","showKeyMap","LetterEntry","LetterBoard","cypher","lineMax","lines","nextLine","line","remaining","length","push","breakLines","index","rowIndex","enclosedLetters","split","c","getLetter","cell","float","toString","clear","showRow","showBoard","cypherLetter","has","toUpperCase","breakIndex","charAt","substring","KeyboardHelp","fontWeight","Progress","awardShown","setAwardShown","useEffect","console","log","setTimeout","src","reward","Playing","focusElementRef","useRef","current","focus","setSelectedKey","keyMap","cypherSet","Set","filter","isLetter","size","targetsMapped","lettersMatches","forEach","remainingToGuess","ref","tabIndex","onKeyDown","undefined","values","find","nothingMapsTo","mapSelectedKeyTo","unselectKey","invokeUndo","captureKey","upper","v","mapKey","Game","NO_PUZZLE","gameState","setGameState","Map","i","String","fromCharCode","set","buildEmptyMap","setKeymap","undoBuffer","setCypherAndPlay","encryptedText","PLAYING","scramblePlaintextAndPlay","plainText","alphabet","shuffled","array","temporaryValue","randomIndex","currentIndex","Math","floor","random","shuffle","letterArray","letterMap","join","undo","lastMap","pop","newKeyMap","setKeyMapping","renderView","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.bb3990ad.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/reward-01.97b0e411.jpg\";","export enum GameStates {\n    NO_PUZZLE = \"NO_PUZZLE\",\n    PLAYING = \"PLAYING\"\n}\n\n","import React, {useState} from 'react';\nimport '../App.css';\n\nexport type NoPuzzleProps = {\n  setCypher: (cypher:string) => void;\n  setPlainText: (plainText:string) => void;\n}\nexport default function NoPuzzle(props:NoPuzzleProps) {\n\n  const [text, setText] = useState('');\n\n  return (\n    <div className=\"NoPuzzle\">\n      <div>\n        Enter the cypher or plaintext:\n      </div>\n      <div>\n        <textarea rows={10} cols={80} value={text} onChange={(ev) => setText(ev.target.value)} />\n      </div>\n      <div>\n        <button style={{fontSize: \"24pt\"}} onClick={() => props.setCypher(text)}>Play</button>\n      </div>\n      <div>\n        <button style={{fontSize: \"24pt\"}} onClick={() => props.setPlainText(text)}>Scramble &amp; Play</button>\n      </div>\n    </div>\n  );\n}","import React from 'react';\nimport '../App.css';\n\nexport type SingleKeyMappingProps = {\n  isSelectedKey: boolean;\n  fromKey: string;\n  toKey: string;\n}\n\nexport default function SingleKeyMapping(props: SingleKeyMappingProps) {\n\n  const keyClass = props.isSelectedKey ? \"key selected\" : \"key\";\n\n  return (\n    <div style={{\n        width: \"42px\",\n        height: \"100px\",\n        border: \"solid 1px black\",\n        borderRadius: \"5px\"\n        }}>\n\n      <div style={{height: \"30px\"}}>\n        <span className={keyClass}>{props.fromKey}</span>\n      </div>\n\n      <div style={{height: \"30px\", marginTop: \"10px\"}}>\n        <span className=\"value\">{props.toKey}</span>\n      </div>\n    </div>\n  );\n}","import React from 'react';\nimport '../App.css';\nimport SingleKeyMapping from './SingleKeyMapping'\n\nexport type KeymapProps = {\n  keymap: Map<string, string>\n  selectedKey: string;\n}\n\nexport default function KeyMap(props: KeymapProps) {\n\n  return (\n    <div>\n      {showKeyMap(props.keymap, props.selectedKey)}\n    </div>\n  );\n\n  function showKeyMap(keymap: Map<string, string>, selectedKey: string) {\n\n    const keys = Array.from(keymap.keys()).map(k =>\n        (<td key={k}>\n          <SingleKeyMapping fromKey={k} toKey={keymap.get(k) || ''} isSelectedKey={k === selectedKey} />\n        </td>))\n\n    return (\n      <div>\n        <table id=\"keymap\">\n          <tbody>\n            <tr>\n              {keys}\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    )\n  }\n}","import React from 'react';\nimport '../App.css';\n\nexport type LetterEntryProps = {\n  isSelectedKey: boolean;\n  fromKey: string;\n  toKey: string;\n}\n\nexport default function LetterEntry(props: LetterEntryProps) {\n\n  const keyClass = props.isSelectedKey ? \"key selected\" : \"key\";\n\n  return (\n    <div style={{\n        width: \"42px\",\n        height: \"100px\",\n        fontSize: \"18pt\"\n        }}>\n\n      <div style={{height: \"30px\"}}>\n        <span className={keyClass}>{props.fromKey}</span>\n      </div>\n\n      <div style={{height: \"30px\", marginTop: \"5px\"}}>\n        <span className=\"value\">{props.toKey}</span>\n      </div>\n    </div>\n  );\n}","import React from 'react';\nimport '../App.css';\nimport LetterEntry from './LetterEntry'\nimport { strict } from 'assert';\n\nexport type LetterBoardProps = {\n  cypher: string;\n  keymap: Map<string, string>\n  selectedKey: string;\n}\n\nexport default function LetterBoard(props: LetterBoardProps) {\n\n  return (\n    <div>\n      {showBoard(props.keymap, props.selectedKey, props.cypher)}\n    </div>\n  );\n\n  function getLetter(keymap: Map<string, string>, cypherLetter: string): string {\n    if (keymap.has(cypherLetter.toUpperCase())) {\n      return keymap.get(cypherLetter.toUpperCase())!\n    }\n\n    return cypherLetter;\n  }\n\n  function showBoard(keymap: Map<string, string>, selectedKey: string, cypher: string) {\n    const MaxCharsPerRow = 35;\n\n    const lines = breakLines(cypher, MaxCharsPerRow);\n    const rows = lines.map((line, index) => showRow(keymap, selectedKey, line, index));\n\n    return (\n      <div>\n        {rows}\n      </div>\n    )\n  }\n\n  function breakLines(cypher: string, lineMax: number) : string[]\n  {\n    const lines = []\n    let [line, remaining] = nextLine(cypher, lineMax);\n\n    while (line.length > 0) {\n      lines.push(line);\n      [line, remaining] = nextLine(remaining, lineMax);\n    }\n\n    return lines;\n  }\n\n  function nextLine(text: string, lineMax: number) : [string, string]\n  {\n    if (text.length <= lineMax) {\n      return [text, \"\"]\n    }\n\n    let breakIndex = lineMax + 1;\n    while (breakIndex > 0 && isText(text.charAt(breakIndex)))\n    {\n      --breakIndex;\n    }\n\n    if (breakIndex > 1) {\n      return [text.substring(0, breakIndex), text.substring(breakIndex)]\n    }\n    else\n    {\n      return [text, \"\"]\n    }\n  }\n\n  function isText(str:string) : boolean \n  {\n    return str !== ' ';\n  }\n\n  function showRow(keymap: Map<string, string>, selectedKey: string, cypher: string, rowIndex: number) {\n    const letters = cypher.split('');\n    const letterEntries = letters.map(c => <LetterEntry isSelectedKey={c === selectedKey} fromKey={c} toKey={getLetter(keymap, c)} />)\n    const enclosedLetters = letterEntries.map((cell,index) => (\n        <div style={{float: \"left\"}}\n             key={rowIndex.toString() + \"_\" + index}>\n               {cell}\n        </div>)\n    )\n\n    return (\n      <div key={rowIndex}>\n        {enclosedLetters}\n        <div style={{clear: \"both\"}} />\n      </div>\n    )\n  }\n}","import React  from 'react';\nimport '../App.css';\n\nexport default function KeyboardHelp() \n{\n    return (\n      <div>\n        <p style={{fontWeight: \"bold\"}}>\n          To unset a letter, press the SPACEBAR after pressing the letter.\n          To invoke UNDO, use the BACKSPACE key.\n        </p>\n      </div>\n    );\n}\n","import React, {useState, useEffect} from 'react';\nimport '../App.css';\nimport reward from '../images/reward-01.jpg';\n\nexport type ProgressProps = {\n  remaining: number;\n}\n\nexport default function Progress(props:ProgressProps) \n{\n    const [awardShown, setAwardShown] = useState(false);\n\n    useEffect(() => {\n      console.log(`In useEffect callback with remaining = ${props.remaining} and awardShow = ${awardShown}`)\n      if (props.remaining === 0 && !awardShown) \n      {\n        setTimeout(() => {\n            setAwardShown(true);\n        }, 2500)\n      }\n    });\n\n    if (props.remaining === 0 && !awardShown) \n    {\n      return showCompleteAward();\n    }\n    else\n    {\n      return showInProgress(props.remaining);\n    }\n    \n    function showCompleteAward()\n    {\n      return (\n        <div>\n            <img src={reward} style={{width: \"300px\", borderRadius:\"15px\", border:\"10px solid puple\"}} />\n        </div>\n      );\n    }\n    \n    function showInProgress(remaining: number)\n    {\n      return <div>You have {remaining} letters left to guess.</div>\n    }\n}\n\n","import React, {useRef, useEffect, useState}  from 'react';\nimport '../App.css';\nimport KeyMap from './KeyMap';\nimport LetterBoard from './LetterBoard';\nimport KeyboardHelp from './KeyboardHelp';\nimport Progress from './Progress';\n\nexport type PlayingProps = {\n  cypher: string;\n  keymap: Map<string, string>\n  mapKey: (k: string, v: string) => void;\n  invokeUndo: () => void;\n}\n\nexport default function Playing(props: PlayingProps) {\n\n  // We have to use an effect to set the focus to our div so we can capture\n  // keys\n  const focusElementRef:any = useRef(null);\n\n  useEffect(() => {\n    if (focusElementRef && focusElementRef.current) {\n      focusElementRef.current.focus();\n    }\n  }, []);\n\n  const [selectedKey, setSelectedKey] = useState('')\n\n  const remaining = remainingToGuess(props.cypher, props.keymap);\n  console.log(`There are ${remaining} letters left to guess.`);\n\n  return (\n    <div ref={focusElementRef} tabIndex={0} className=\"Playing\" onKeyDown={ev => captureKey(ev)} >\n      <KeyMap keymap={props.keymap} selectedKey={selectedKey} />\n      <KeyboardHelp />\n      <Progress remaining={remaining} />\n      <LetterBoard cypher={props.cypher} keymap={props.keymap} selectedKey={selectedKey} />\n    </div>\n  );\n\n  function nothingMapsTo(k:string)\n  {\n    const matched = Array.from(props.keymap.values()).find(value => k === value);\n    return matched === undefined;\n  }\n\n  function captureKey(ev: React.KeyboardEvent) {\n    console.log(`Just got an [${ev.key}]`);\n    var k = ev.key.toUpperCase();\n    if (k.length === 1 && k >= \"A\" && k <= \"Z\") {\n      if (selectedKey !== '') {\n        // He wants to map the selected key to value k.  Don't let him do it if there is\n        // already something mapped there\n        if (nothingMapsTo(k)) {\n          mapSelectedKeyTo(selectedKey, k)\n        }\n        \n        setSelectedKey('');\n      }\n      else {\n        setSelectedKey(k);\n      }\n    }\n    else if (k === \" \")\n    {\n      if (selectedKey !== '')\n      {\n        mapSelectedKeyTo(selectedKey, '')\n        unselectKey();\n      }\n    }\n    else if (k === \"BACKSPACE\")\n    {\n      undo();\n    }\n  }\n\n  function unselectKey() {\n    setSelectedKey('');\n  }\n\n  function undo()\n  {\n    unselectKey();\n    props.invokeUndo();\n  }\n\n  function isLetter(c:string) : Boolean\n  {\n    const upper = c.toUpperCase();\n    return (upper >= 'A' && upper <= 'Z');\n  }\n\n  function remainingToGuess(cypher: string, keyMap: Map<string, string>)\n  {\n    const cypherSet = new Set(Array.from(cypher).filter(isLetter));\n    console.log(`The cypher set has ${cypherSet.size} distinct characters.`);\n    const targetsMapped = new Set(Array.from(keyMap.keys()).filter(k => keyMap.get(k) != ''));\n    console.log(`There are ${targetsMapped.size} distinct mapped characters.`);\n\n    let lettersMatches = 0;\n    cypherSet.forEach(cypherLetter => {\n      if (targetsMapped.has(cypherLetter)) {\n        console.log(`The keymap has ${cypherLetter} so we count it.`)\n        ++lettersMatches;\n      }\n    })\n\n    return cypherSet.size - lettersMatches;\n  }\n\n  function mapSelectedKeyTo(k: string, v: string)\n  {\n    props.mapKey(k, v);\n  }\n}","import React, {useState} from 'react';\nimport '../App.css';\nimport {GameStates} from '../models/gameModels';\nimport NoPuzzle from './NoPuzzle';\nimport Playing from './Playing';\n\nexport default function Game() {\n\n  const [gameState, setGameState] = useState(GameStates.NO_PUZZLE)\n  const [cypher, setCypher] = useState('');\n  const [keymap, setKeymap] = useState(buildEmptyMap());\n  const [undoBuffer, _] = useState<Map<string,string>[]>([]);\n\n  function setCypherAndPlay(encryptedText: string)\n  {\n    setCypher(encryptedText.toUpperCase());\n    setGameState(GameStates.PLAYING);\n  }\n\n  function shuffle(array:string[]) \n  {\n    var currentIndex = array.length;\n    var temporaryValue, randomIndex;\n  \n    // While there remain elements to shuffle...\n    while (0 !== currentIndex) {\n      // Pick a remaining element...\n      randomIndex = Math.floor(Math.random() * currentIndex);\n      currentIndex -= 1;\n  \n      // And swap it with the current element.\n      temporaryValue = array[currentIndex];\n      array[currentIndex] = array[randomIndex];\n      array[randomIndex] = temporaryValue;\n    }\n  \n    return array;\n  };\n  \n  function scramblePlaintextAndPlay(plainText: string)\n  {\n    const alphabet = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n    \n    const shuffled = shuffle(Array.from(alphabet));\n    const letterArray = Array.from(alphabet);\n\n    const letterMap = new Map<string,string>();\n    for (let i = 0; i < letterArray.length; ++i)\n    {\n      letterMap.set(letterArray[i], shuffled[i])\n    }\n\n    const plainChars = Array.from(plainText.toUpperCase());\n    const mappedChars = plainChars.map(c => letterMap.has(c) ? letterMap.get(c) : c);\n    const encryptedText = mappedChars.join(\"\");\n    console.log(`Plain text: ${plainText}`);\n    console.log(`Encrypted: ${encryptedText}`);\n    setCypherAndPlay(encryptedText);\n  }\n\n  function renderView() {\n    switch(gameState) {\n      case GameStates.NO_PUZZLE:\n        return (<NoPuzzle setCypher={setCypherAndPlay} setPlainText={scramblePlaintextAndPlay} />);\n      case GameStates.PLAYING:\n        return (<Playing cypher={cypher} keymap={keymap} mapKey={mapKey} invokeUndo={undo} />)\n    }\n  }\n\n  function undo() {\n    const lastMap = undoBuffer.pop();\n    if (lastMap !== undefined) {\n      setKeymap(lastMap);\n    }\n  }\n\n  function mapKey(k: string, v: string)\n  {\n    setKeyMapping(k, v);\n    undoBuffer.push(keymap);\n  }\n  \n  function setKeyMapping(k: string, v: string)\n  {\n    const newKeyMap:Map<string,string> = new Map<string, string>(keymap)\n    newKeyMap.set(k, v);\n    setKeymap(newKeyMap);\n  }\n\n  return (\n    <div className=\"Game\">\n      { renderView() }\n    </div>\n  );\n}\n\nfunction buildEmptyMap() : Map<string, string>\n{\n  const map = new Map<string, string>();\n\n  for (var i = 0; i<26; ++i)\n  {\n    var key = String.fromCharCode(65 + i);\n    map.set(key, \"\");\n  }\n\n  return map;\n}","import React from 'react';\nimport './App.css';\nimport Game from './components/Game'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Game />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}