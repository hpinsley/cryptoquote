{"version":3,"sources":["images/reward-01.jpg","models/gameModels.ts","components/NoPuzzle.tsx","components/SingleKeyMapping.tsx","components/KeyMap.tsx","components/LetterEntry.tsx","components/LetterBoard.tsx","components/KeyboardHelp.tsx","components/Progress.tsx","components/Playing.tsx","data/sample-puzzles/puzzles-01.ts","services/quoteService.ts","components/Game.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","GameStates","NoPuzzle","props","useState","text","setText","className","rows","cols","value","onChange","ev","target","style","fontSize","onClick","setCypher","setPlainText","useRandomQuote","SingleKeyMapping","keyClass","isSelectedKey","width","height","border","borderRadius","fromKey","marginTop","toKey","KeyMap","keymap","selectedKey","keys","Array","from","map","k","key","get","id","showKeyMap","LetterEntry","LetterBoard","cypher","lineMax","lines","nextLine","line","remaining","length","push","breakLines","index","rowIndex","enclosedLetters","split","c","getLetter","cell","float","toString","clear","showRow","showBoard","cypherLetter","has","toUpperCase","breakIndex","charAt","substring","KeyboardHelp","fontWeight","Progress","awardShown","setAwardShown","useEffect","setTimeout","src","reward","Playing","focusElementRef","useRef","current","focus","setSelectedKey","keyMap","cypherSet","Set","filter","isLetter","targetsMapped","lettersMatches","forEach","size","remainingToGuess","ref","tabIndex","onKeyDown","undefined","values","find","nothingMapsTo","mapSelectedKeyTo","unselectKey","invokeUndo","captureKey","upper","v","mapKey","encrypt","plainText","alphabet","shuffled","array","temporaryValue","randomIndex","currentIndex","Math","floor","random","shuffle","letterArray","letterMap","Map","i","set","encryptedText","join","console","log","Game","NO_PUZZLE","gameState","setGameState","String","fromCharCode","buildEmptyMap","setKeymap","undoBuffer","setCypherAndPlay","PLAYING","scramblePlaintextAndPlay","quote","quotes","QuoteService","author","undo","lastMap","pop","newKeyMap","setKeyMapping","renderView","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.4e4c0399.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/reward-01.97b0e411.jpg\";","export enum GameStates {\n    NO_PUZZLE = \"NO_PUZZLE\",\n    PLAYING = \"PLAYING\"\n}\n\nexport type Quotation =\n{\n    plainText: string;\n    author?: string;\n}","import React, {useState} from 'react';\nimport '../App.css';\n\nexport type NoPuzzleProps = {\n  setCypher: (cypher:string) => void;\n  setPlainText: (plainText:string) => void;\n  useRandomQuote: () => void;\n}\nexport default function NoPuzzle(props:NoPuzzleProps) {\n\n  const [text, setText] = useState('');\n\n\n  return (\n    <div className=\"NoPuzzle\">\n      <div>\n        Enter the cypher or plaintext:\n      </div>\n      <div>\n        <textarea rows={10} cols={80} value={text} onChange={(ev) => setText(ev.target.value)} />\n      </div>\n      <div>\n        <button style={{fontSize: \"24pt\"}} onClick={() => props.setCypher(text)}>Play</button>\n      </div>\n      <div>\n        <button style={{fontSize: \"24pt\"}} onClick={() => props.setPlainText(text)}>Scramble &amp; Play</button>\n      </div>\n      <div>\n        <button style={{fontSize: \"24pt\"}} onClick={props.useRandomQuote}>Random</button>\n      </div>\n    </div>\n  );\n}","import React from 'react';\nimport '../App.css';\n\nexport type SingleKeyMappingProps = {\n  isSelectedKey: boolean;\n  fromKey: string;\n  toKey: string;\n}\n\nexport default function SingleKeyMapping(props: SingleKeyMappingProps) {\n\n  const keyClass = props.isSelectedKey ? \"key selected\" : \"key\";\n\n  return (\n    <div style={{\n        width: \"42px\",\n        height: \"100px\",\n        border: \"solid 1px black\",\n        borderRadius: \"5px\"\n        }}>\n\n      <div style={{height: \"30px\"}}>\n        <span className={keyClass}>{props.fromKey}</span>\n      </div>\n\n      <div style={{height: \"30px\", marginTop: \"10px\"}}>\n        <span className=\"value\">{props.toKey}</span>\n      </div>\n    </div>\n  );\n}","import React from 'react';\nimport '../App.css';\nimport SingleKeyMapping from './SingleKeyMapping'\n\nexport type KeymapProps = {\n  keymap: Map<string, string>\n  selectedKey: string;\n}\n\nexport default function KeyMap(props: KeymapProps) {\n\n  return (\n    <div>\n      {showKeyMap(props.keymap, props.selectedKey)}\n    </div>\n  );\n\n  function showKeyMap(keymap: Map<string, string>, selectedKey: string) {\n\n    const keys = Array.from(keymap.keys()).map(k =>\n        (<td key={k}>\n          <SingleKeyMapping fromKey={k} toKey={keymap.get(k) || ''} isSelectedKey={k === selectedKey} />\n        </td>))\n\n    return (\n      <div>\n        <table id=\"keymap\">\n          <tbody>\n            <tr>\n              {keys}\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    )\n  }\n}","import React from 'react';\nimport '../App.css';\n\nexport type LetterEntryProps = {\n  isSelectedKey: boolean;\n  fromKey: string;\n  toKey: string;\n}\n\nexport default function LetterEntry(props: LetterEntryProps) {\n\n  const keyClass = props.isSelectedKey ? \"key selected\" : \"key\";\n\n  return (\n    <div style={{\n        width: \"42px\",\n        height: \"100px\",\n        fontSize: \"18pt\"\n        }}>\n\n      <div style={{height: \"30px\"}}>\n        <span className={keyClass}>{props.fromKey}</span>\n      </div>\n\n      <div style={{height: \"30px\", marginTop: \"5px\"}}>\n        <span className=\"value\">{props.toKey}</span>\n      </div>\n    </div>\n  );\n}","import React from 'react';\nimport '../App.css';\nimport LetterEntry from './LetterEntry'\nimport { strict } from 'assert';\n\nexport type LetterBoardProps = {\n  cypher: string;\n  keymap: Map<string, string>\n  selectedKey: string;\n}\n\nexport default function LetterBoard(props: LetterBoardProps) {\n\n  return (\n    <div>\n      {showBoard(props.keymap, props.selectedKey, props.cypher)}\n    </div>\n  );\n\n  function getLetter(keymap: Map<string, string>, cypherLetter: string): string {\n    if (keymap.has(cypherLetter.toUpperCase())) {\n      return keymap.get(cypherLetter.toUpperCase())!\n    }\n\n    return cypherLetter;\n  }\n\n  function showBoard(keymap: Map<string, string>, selectedKey: string, cypher: string) {\n    const MaxCharsPerRow = 35;\n\n    const lines = breakLines(cypher, MaxCharsPerRow);\n    const rows = lines.map((line, index) => showRow(keymap, selectedKey, line, index));\n\n    return (\n      <div>\n        {rows}\n      </div>\n    )\n  }\n\n  function breakLines(cypher: string, lineMax: number) : string[]\n  {\n    const lines = []\n    let [line, remaining] = nextLine(cypher, lineMax);\n\n    while (line.length > 0) {\n      lines.push(line);\n      [line, remaining] = nextLine(remaining, lineMax);\n    }\n\n    return lines;\n  }\n\n  function nextLine(text: string, lineMax: number) : [string, string]\n  {\n    if (text.length <= lineMax) {\n      return [text, \"\"]\n    }\n\n    let breakIndex = lineMax + 1;\n    while (breakIndex > 0 && isText(text.charAt(breakIndex)))\n    {\n      --breakIndex;\n    }\n\n    if (breakIndex > 1) {\n      return [text.substring(0, breakIndex), text.substring(breakIndex)]\n    }\n    else\n    {\n      return [text, \"\"]\n    }\n  }\n\n  function isText(str:string) : boolean \n  {\n    return str !== ' ';\n  }\n\n  function showRow(keymap: Map<string, string>, selectedKey: string, cypher: string, rowIndex: number) {\n    const letters = cypher.split('');\n    const letterEntries = letters.map(c => <LetterEntry isSelectedKey={c === selectedKey} fromKey={c} toKey={getLetter(keymap, c)} />)\n    const enclosedLetters = letterEntries.map((cell,index) => (\n        <div style={{float: \"left\"}}\n             key={rowIndex.toString() + \"_\" + index}>\n               {cell}\n        </div>)\n    )\n\n    return (\n      <div key={rowIndex}>\n        {enclosedLetters}\n        <div style={{clear: \"both\"}} />\n      </div>\n    )\n  }\n}","import React  from 'react';\nimport '../App.css';\n\nexport default function KeyboardHelp() \n{\n    return (\n      <div>\n        <p style={{fontWeight: \"bold\"}}>\n          To unset a letter, press the SPACEBAR after pressing the letter.\n          To invoke UNDO, use the BACKSPACE key.\n        </p>\n      </div>\n    );\n}\n","import React, {useState, useEffect} from 'react';\nimport '../App.css';\nimport reward from '../images/reward-01.jpg';\n\nexport type ProgressProps = {\n  remaining: number;\n}\n\nexport default function Progress(props:ProgressProps) \n{\n    const [awardShown, setAwardShown] = useState(false);\n\n    useEffect(() => {\n      //console.log(`In useEffect callback with remaining = ${props.remaining} and awardShow = ${awardShown}`)\n      if (props.remaining === 0 && !awardShown) \n      {\n        setTimeout(() => {\n            setAwardShown(true);\n        }, 2500)\n      }\n    });\n\n    if (props.remaining === 0 && !awardShown) \n    {\n      return showCompleteAward();\n    }\n    else\n    {\n      return showInProgress(props.remaining);\n    }\n    \n    function showCompleteAward()\n    {\n      return (\n        <div>\n            <img src={reward} style={{width: \"300px\", borderRadius:\"15px\", border:\"10px solid puple\"}} />\n        </div>\n      );\n    }\n    \n    function showInProgress(remaining: number)\n    {\n      return <div>You have {remaining} letters left to guess.</div>\n    }\n}\n\n","import React, {useRef, useEffect, useState}  from 'react';\nimport '../App.css';\nimport KeyMap from './KeyMap';\nimport LetterBoard from './LetterBoard';\nimport KeyboardHelp from './KeyboardHelp';\nimport Progress from './Progress';\n\nexport type PlayingProps = {\n  cypher: string;\n  keymap: Map<string, string>\n  mapKey: (k: string, v: string) => void;\n  invokeUndo: () => void;\n}\n\nexport default function Playing(props: PlayingProps) {\n\n  // We have to use an effect to set the focus to our div so we can capture\n  // keys\n  const focusElementRef:any = useRef(null);\n\n  useEffect(() => {\n    if (focusElementRef && focusElementRef.current) {\n      focusElementRef.current.focus();\n    }\n  }, []);\n\n  const [selectedKey, setSelectedKey] = useState('')\n\n  const remaining = remainingToGuess(props.cypher, props.keymap);\n\n  return (\n    <div ref={focusElementRef} tabIndex={0} className=\"Playing\" onKeyDown={ev => captureKey(ev)} >\n      <KeyMap keymap={props.keymap} selectedKey={selectedKey} />\n      <KeyboardHelp />\n      <Progress remaining={remaining} />\n      <LetterBoard cypher={props.cypher} keymap={props.keymap} selectedKey={selectedKey} />\n    </div>\n  );\n\n  function nothingMapsTo(k:string)\n  {\n    const matched = Array.from(props.keymap.values()).find(value => k === value);\n    return matched === undefined;\n  }\n\n  function captureKey(ev: React.KeyboardEvent) {\n    //console.log(`Just got an [${ev.key}]`);\n    var k = ev.key.toUpperCase();\n    if (k.length === 1 && k >= \"A\" && k <= \"Z\") {\n      if (selectedKey !== '') {\n        // He wants to map the selected key to value k.  Don't let him do it if there is\n        // already something mapped there\n        if (nothingMapsTo(k)) {\n          mapSelectedKeyTo(selectedKey, k)\n        }\n        \n        setSelectedKey('');\n      }\n      else {\n        setSelectedKey(k);\n      }\n    }\n    else if (k === \" \")\n    {\n      if (selectedKey !== '')\n      {\n        mapSelectedKeyTo(selectedKey, '')\n        unselectKey();\n      }\n    }\n    else if (k === \"BACKSPACE\")\n    {\n      undo();\n    }\n  }\n\n  function unselectKey() {\n    setSelectedKey('');\n  }\n\n  function undo()\n  {\n    unselectKey();\n    props.invokeUndo();\n  }\n\n  function isLetter(c:string) : Boolean\n  {\n    const upper = c.toUpperCase();\n    return (upper >= 'A' && upper <= 'Z');\n  }\n\n  function remainingToGuess(cypher: string, keyMap: Map<string, string>)\n  {\n    const cypherSet = new Set(Array.from(cypher).filter(isLetter));\n    const targetsMapped = new Set(Array.from(keyMap.keys()).filter(k => keyMap.get(k) != ''));\n\n    let lettersMatches = 0;\n    cypherSet.forEach(cypherLetter => {\n      if (targetsMapped.has(cypherLetter)) {\n        ++lettersMatches;\n      }\n    })\n\n    return cypherSet.size - lettersMatches;\n  }\n\n  function mapSelectedKeyTo(k: string, v: string)\n  {\n    props.mapKey(k, v);\n  }\n}","import {Quotation} from '../../models/gameModels'\n\nexport default <Quotation[]>\n[\n    {\n        \"plainText\": \"The greatest glory in living lies not in never falling, but in rising every time we fall.\",\n        \"author\": \"Nelson Mandela\"\n    },\n    {\n        \"plainText\": \"The way to get started is to quit talking and begin doing.\",\n        \"author\": \"Walt Disney\"\n    },\n    {\n        \"plainText\": \"Your time is limited, so don't waste it living someone else's life. Don't be trapped by dogma – which is living with the results of other people's thinking.\",\n        \"author\": \"Steve Jobs\"\n    },\n    {\n        \"plainText\": \"If life were predictable it would cease to be life, and be without flavor.\",\n        \"author\": \"Eleanor Roosevelt\"\n    },\n    {\n        \"plainText\": \"If you look at what you have in life, you'll always have more. If you look at what you don't have in life, you'll never have enough.\",\n        \"author\": \"Oprah Winfrey\"\n    },\n    {\n        \"plainText\": \"If you set your goals ridiculously high and it's a failure, you will fail above everyone else's success.\",\n        \"author\": \"James Cameron\"\n    },\n    {\n        \"plainText\": \"Life is what happens when you're busy making other plans.\",\n        \"author\": \"John Lennon\"\n    },\n    {\n        \"plainText\": \"Spread love everywhere you go. Let no one ever come to you without leaving happier.\",\n        \"author\": \"Mother Teresa\"\n    },\n    {\n        \"plainText\": \"When you reach the end of your rope, tie a knot in it and hang on.\",\n        \"author\": \"Franklin D. Roosevelt\"\n    },\n    {\n        \"plainText\": \"Always remember that you are absolutely unique. Just like everyone else.\",\n        \"author\": \"Margaret Mead\"\n    },\n    {\n        \"plainText\": \"Don't judge each day by the harvest you reap but by the seeds that you plant.\",\n        \"author\": \"Robert Louis Stevenson\"\n    },\n    {\n        \"plainText\": \"The future belongs to those who believe in the beauty of their dreams.\",\n        \"author\": \"Eleanor Roosevelt\"\n    },\n    {\n        \"plainText\": \"Tell me and I forget. Teach me and I remember. Involve me and I learn.\",\n        \"author\": \"Benjamin Franklin\"\n    },\n    {\n        \"plainText\": \"The best and most beautiful things in the world cannot be seen or even touched - they must be felt with the heart.\",\n        \"author\": \"Helen Keller\"\n    },\n    {\n        \"plainText\": \"It is during our darkest moments that we must focus to see the light.\",\n        \"author\": \"Aristotle\"\n    },\n    {\n        \"plainText\": \"Whoever is happy will make others happy too.\",\n        \"author\": \"Anne Frank\"\n    },\n    {\n        \"plainText\": \"Do not go where the path may lead, go instead where there is no path and leave a trail.\",\n        \"author\": \"Ralph Waldo Emerson\"\n    },\n    {\n        \"plainText\": \"You will face many defeats in life, but never let yourself be defeated.\",\n        \"author\": \"Maya Angelou\"\n    },\n    {\n        \"plainText\": \"The greatest glory in living lies not in never falling, but in rising every time we fall.\",\n        \"author\": \"Nelson Mandela \"\n    },\n    {\n        \"plainText\": \"Never let the fear of striking out keep you from playing the game.\",\n        \"author\": \"Babe Ruth\"\n    },\n    {\n        \"plainText\": \"Life is either a daring adventure or nothing at all.\",\n        \"author\": \"Helen Keller\"\n    },\n    {\n        \"plainText\": \"Many of life's failures are people who did not realize how close they were to success when they gave up.\",\n        \"author\": \"Thomas A. Edison\"\n    },\n    {\n        \"plainText\": \"You have brains in your head. You have feet in your shoes. You can steer yourself any direction you choose.\",\n        \"author\": \"Dr. Seuss\"\n    },\n    {\n        \"plainText\": \"Success is not final; failure is not fatal: It is the courage to continue that counts.\",\n        \"author\": \"Winston S. Churchill\"\n    },\n    {\n        \"plainText\": \"Success usually comes to those who are too busy to be looking for it.\",\n        \"author\": \"Henry David Thoreau\"\n    },\n    {\n        \"plainText\": \"The way to get started is to quit talking and begin doing.\",\n        \"author\": \"Walt Disney\"\n    },\n    {\n        \"plainText\": \"If you really look closely, most overnight successes took a long time.\",\n        \"author\": \"Steve Jobs\"\n    },\n    {\n        \"plainText\": \"The secret of success is to do the common thing uncommonly well.\",\n        \"author\": \"John D. Rockefeller Jr.\"\n    },\n    {\n        \"plainText\": \"I find that the harder I work, the more luck I seem to have.\",\n        \"author\": \"Thomas Jefferson\"\n    },\n    {\n        \"plainText\": \"The real test is not whether you avoid this failure, because you won't. It's whether you let it harden or shame you into inaction, or whether you learn from it; whether you choose to persevere.\",\n        \"author\": \"Barack Obama\"\n    },\n    {\n        \"plainText\": \"You miss 100% of the shots you don't take.\",\n        \"author\": \"Wayne Gretzky\"\n    },\n    {\n        \"plainText\": \"Whether you think you can or you think you can't, you're right.\",\n        \"author\": \"Henry Ford\"\n    },\n    {\n        \"plainText\": \"I have learned over the years that when one's mind is made up, this diminishes fear.\",\n        \"author\": \"Rosa Parks\"\n    },\n    {\n        \"plainText\": \"I alone cannot change the world, but I can cast a stone across the water to create many ripples.\",\n        \"author\": \"Mother Teresa\"\n    },\n    {\n        \"plainText\": \"Nothing is impossible, the word itself says, ‘I'm possible!'\",\n        \"author\": \"Audrey Hepburn\"\n    },\n    {\n        \"plainText\": \"The question isn't who is going to let me; it's who is going to stop me.\",\n        \"author\": \"Ayn Rand\"\n    },\n    {\n        \"plainText\": \"The only person you are destined to become is the person you decide to be.\",\n        \"author\": \"Ralph Waldo Emerson\"\n    }\n]","import quotes from '../data/sample-puzzles/puzzles-01'\nimport { Quotation } from '../models/gameModels';\n\nexport function GetRandomQuote(): Quotation {\n    const index = Math.floor(Math.random() * quotes.length);\n    return quotes[index];\n}\n\nexport function encrypt(plainText: string) : string\n{\n  const alphabet = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n  \n  const shuffled = shuffle(Array.from(alphabet));\n  const letterArray = Array.from(alphabet);\n\n  const letterMap = new Map<string,string>();\n  for (let i = 0; i < letterArray.length; ++i)\n  {\n    letterMap.set(letterArray[i], shuffled[i])\n  }\n\n  const plainChars = Array.from(plainText.toUpperCase());\n  const mappedChars = plainChars.map(c => letterMap.has(c) ? letterMap.get(c) : c);\n  const encryptedText = mappedChars.join(\"\");\n  console.log(`Plain text: ${plainText}`);\n  console.log(`Encrypted: ${encryptedText}`);\n\n  return encryptedText;\n}\n\nfunction shuffle(array: string[]) {\n    var currentIndex = array.length;\n    var temporaryValue, randomIndex;\n\n    // While there remain elements to shuffle...\n    while (0 !== currentIndex) {\n        // Pick a remaining element...\n        randomIndex = Math.floor(Math.random() * currentIndex);\n        currentIndex -= 1;\n\n        // And swap it with the current element.\n        temporaryValue = array[currentIndex];\n        array[currentIndex] = array[randomIndex];\n        array[randomIndex] = temporaryValue;\n    }\n\n    return array;\n};","import React, {useState} from 'react';\nimport '../App.css';\nimport {GameStates} from '../models/gameModels';\nimport NoPuzzle from './NoPuzzle';\nimport Playing from './Playing';\nimport { encrypt} from '../services/quoteService';\nimport * as QuoteService from '../services/quoteService'\n\nexport default function Game() {\n\n  const [gameState, setGameState] = useState(GameStates.NO_PUZZLE)\n  const [cypher, setCypher] = useState('');\n  const [keymap, setKeymap] = useState(buildEmptyMap());\n  const [undoBuffer, _] = useState<Map<string,string>[]>([]);\n\n  function setCypherAndPlay(encryptedText: string)\n  {\n    setCypher(encryptedText.toUpperCase());\n    setGameState(GameStates.PLAYING);\n  }\n\n  function scramblePlaintextAndPlay(plainText: string)\n  {\n    const encryptedText = encrypt(plainText);\n    console.log(`Plain text: ${plainText}`);\n    console.log(`Encrypted: ${encryptedText}`);\n    setCypherAndPlay(encryptedText);\n  }\n\n  function useRandomQuote()\n  {\n    const quote = QuoteService.GetRandomQuote();\n    const plainText = quote.plainText + (quote.author ? ('-- ' + quote.author) : \"\");\n    scramblePlaintextAndPlay(plainText);\n  }\n\n  function renderView() {\n    switch(gameState) {\n      case GameStates.NO_PUZZLE:\n        return (<NoPuzzle setCypher={setCypherAndPlay} setPlainText={scramblePlaintextAndPlay} useRandomQuote={useRandomQuote} />);\n      case GameStates.PLAYING:\n        return (<Playing cypher={cypher} keymap={keymap} mapKey={mapKey} invokeUndo={undo} />)\n    }\n  }\n\n  function undo() {\n    const lastMap = undoBuffer.pop();\n    if (lastMap !== undefined) {\n      setKeymap(lastMap);\n    }\n  }\n\n  function mapKey(k: string, v: string)\n  {\n    setKeyMapping(k, v);\n    undoBuffer.push(keymap);\n  }\n  \n  function setKeyMapping(k: string, v: string)\n  {\n    const newKeyMap:Map<string,string> = new Map<string, string>(keymap)\n    newKeyMap.set(k, v);\n    setKeymap(newKeyMap);\n  }\n\n  return (\n    <div className=\"Game\">\n      { renderView() }\n    </div>\n  );\n}\n\nfunction buildEmptyMap() : Map<string, string>\n{\n  const map = new Map<string, string>();\n\n  for (var i = 0; i<26; ++i)\n  {\n    var key = String.fromCharCode(65 + i);\n    map.set(key, \"\");\n  }\n\n  return map;\n}","import React from 'react';\nimport './App.css';\nimport Game from './components/Game'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Game />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}